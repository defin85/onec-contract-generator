"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import os
import json
import re
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Any
from collections import defaultdict

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—â–µ–º –≤ –æ—Ç—á–µ—Ç–µ
ALLOWED_ROOT_TYPES = [
    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã", "–û–±—â–∏–µ–§–æ—Ä–º—ã", "–û—Ç—á–µ—Ç—ã",
    "–û–±—Ä–∞–±–æ—Ç–∫–∏", "–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π", "–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è",
    "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–ü–ª–∞–Ω—ã–û–±–º–µ–Ω–∞", "–ë–∏–∑–Ω–µ—Å–ü—Ä–æ—Ü–µ—Å—Å—ã", "–ó–∞–¥–∞—á–∏"
]

class MetadataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."""
    
    def __init__(self, report_path: str, output_dir: str):
        self.report_path = Path(report_path)
        self.output_dir = Path(output_dir)
        self.logs = defaultdict(list)  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
    def log(self, category: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        self.logs[category].append(message)
        
    def print_logs(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏."""
        if not self.logs:
            return
            
        print("\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 50)
        
        for category, messages in self.logs.items():
            if messages:
                print(f"\nüîç {category} ({len(messages)}):")
                for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    print(f"  ‚Ä¢ {msg}")
                if len(messages) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("=" * 50)

    def clean_output_directory(self):
        """–û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if self.output_dir.exists():
            print(f"  üßπ –û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {self.output_dir}")
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .json –≤ –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                for json_file in self.output_dir.rglob("*.json"):
                    json_file.unlink()
                self.log("info", f"–û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {self.output_dir}")
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏: {e}")
        else:
            self.output_dir.mkdir(parents=True, exist_ok=True)
            self.log("info", f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.output_dir}")

    def parse_report(self) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        print(f"  üìñ –ß–∏—Ç–∞—é –æ—Ç—á–µ—Ç: {self.report_path}")
        
        try:
            with open(self.report_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            try:
                with open(self.report_path, 'r', encoding='cp1251') as f:
                    content = f.read()
            except Exception as e:
                self.log("error", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {e}")
                return {}
        
        lines = content.split('\n')
        self.log("info", f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        objects = {}
        current_object = None
        current_path = []
        
        for i, line in enumerate(lines):
            trimmed_line = line.strip()
            if not trimmed_line:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            indent_level = len(line) - len(line.lstrip())
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
            if indent_level == 0 and any(trimmed_line.startswith(f"- {root_type}.") for root_type in ALLOWED_ROOT_TYPES):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞
                object_name = trimmed_line[2:]  # –£–±–∏—Ä–∞–µ–º "- "
                current_object = object_name
                current_path = [object_name]
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
                objects[object_name] = {
                    "name": object_name,
                    "type": self._extract_object_type(object_name),
                    "attributes": [],
                    "tabular_sections": [],
                    "comment": ""
                }
                
                self.log("info", f"–ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç: {object_name}")
                
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            elif current_object and indent_level > 0:
                # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –¥–µ—Ñ–∏—Å
                clean_line = trimmed_line.lstrip('- ').strip()
                
                if clean_line.startswith("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"):
                    comment = clean_line[12:].strip().strip('"')
                    if current_object in objects:
                        objects[current_object]["comment"] = comment
                        
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è "–¢–∏–ø:" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
                elif clean_line.startswith("–¢–∏–ø:"):
                    type_value = clean_line[4:].strip()
                    if type_value and current_object in objects:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç
                        if objects[current_object]["attributes"]:
                            last_attr = objects[current_object]["attributes"][-1]
                            last_attr["type"] = type_value
                            self.log("info", f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –¥–ª—è {last_attr['name']}: {type_value}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
                elif "." in clean_line and not clean_line.startswith("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:") and not clean_line.startswith("–¢–∏–ø:"):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
                    attr_name = clean_line.split('.')[-1]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç –∏–ª–∏ —Ç–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å
                    if "–¢–∞–±–ª–∏—á–Ω—ã–µ–ß–∞—Å—Ç–∏" in clean_line:
                        # –≠—Ç–æ —Ç–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å
                        tab_section = {
                            "name": attr_name,
                            "type": "–¢–∞–±–ª–∏—á–Ω–∞—è–ß–∞—Å—Ç—å",
                            "attributes": []
                        }
                        objects[current_object]["tabular_sections"].append(tab_section)
                        self.log("info", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å: {attr_name}")
                    else:
                        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç
                        attr = {
                            "name": attr_name,
                            "type": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                            "path": clean_line
                        }
                        objects[current_object]["attributes"].append(attr)
                        self.log("info", f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç: {attr_name}")
        
        self.log("summary", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
        return objects

    def _extract_object_type(self, object_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –µ–≥–æ –∏–º–µ–Ω–∏."""
        if object_name.startswith("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏."):
            return "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
        elif object_name.startswith("–î–æ–∫—É–º–µ–Ω—Ç—ã."):
            return "–î–æ–∫—É–º–µ–Ω—Ç"
        elif object_name.startswith("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã."):
            return "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞"
        elif object_name.startswith("–û—Ç—á–µ—Ç—ã."):
            return "–û—Ç—á–µ—Ç"
        elif object_name.startswith("–û–±—Ä–∞–±–æ—Ç–∫–∏."):
            return "–û–±—Ä–∞–±–æ—Ç–∫–∞"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π."):
            return "–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è."):
            return "–†–µ–≥–∏—Å—Ç—Ä–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"
        else:
            return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

    def generate_contract(self, object_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        contract = {
            "metadata_type": "Object",
            "name": object_data["name"],
            "type": object_data["type"],
            "comment": object_data["comment"],
            "structure": {
                "attributes_count": len(object_data["attributes"]),
                "tabular_sections_count": len(object_data["tabular_sections"]),
                "attributes": object_data["attributes"],
                "tabular_sections": object_data["tabular_sections"]
            },
            "generated_at": str(Path().cwd()),
            "source": "Text Report"
        }
        
        return contract

    def save_contract(self, contract: Dict[str, Any], object_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ JSON —Ñ–∞–π–ª."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            object_type = contract["type"]
            if object_type == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫":
                folder = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"
            elif object_type == "–î–æ–∫—É–º–µ–Ω—Ç":
                folder = "–î–æ–∫—É–º–µ–Ω—Ç—ã"
            elif object_type == "–û—Ç—á–µ—Ç":
                folder = "–û—Ç—á–µ—Ç—ã"
            elif object_type == "–û–±—Ä–∞–±–æ—Ç–∫–∞":
                folder = "–û–±—Ä–∞–±–æ—Ç–∫–∏"
            elif object_type == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞":
                folder = "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã"
            else:
                folder = "–ü—Ä–æ—á–µ–µ"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            output_folder = self.output_dir / folder
            output_folder.mkdir(parents=True, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Ç–∏–ø–∞
            object_short_name = object_name.split('.')[-1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            output_file = output_folder / f"{object_short_name}.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(contract, f, ensure_ascii=False, indent=2)
            
            self.log("success", f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {object_short_name}")
            
        except Exception as e:
            self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {object_name}: {e}")

    def generate(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
        self.clean_output_directory()
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
        objects = self.parse_report()
        if not objects:
            self.log("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ –æ—Ç—á–µ—Ç–∞")
            self.print_logs()
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        success_count = 0
        for object_name, object_data in objects.items():
            try:
                contract = self.generate_contract(object_data)
                self.save_contract(contract, object_name)
                success_count += 1
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è {object_name}: {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("summary", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}, —É—Å–ø–µ—à–Ω–æ: {success_count}")
        self.print_logs()
        
        return success_count > 0 