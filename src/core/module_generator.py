"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ XML-—Ñ–∞–π–ª–æ–≤.
"""

import os
import json
import shutil
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, List, Optional, Any

class ModuleGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π."""
    
    def __init__(self, conf_dir: str, output_dir: str):
        self.conf_dir = Path(conf_dir)
        self.output_dir = Path(output_dir)
        
    def clean_output_directory(self):
        """–û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π."""
        if self.output_dir.exists():
            print(f"  üßπ –û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {self.output_dir}")
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .json –≤ –ø–∞–ø–∫–µ
                for json_file in self.output_dir.glob("*.json"):
                    json_file.unlink()
                    print(f"    –£–¥–∞–ª–µ–Ω: {json_file.name}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                for subdir in self.output_dir.iterdir():
                    if subdir.is_dir():
                        shutil.rmtree(subdir)
                        print(f"    –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {subdir.name}")
                
                print(f"  ‚úÖ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ {self.output_dir}: {e}")
        else:
            print(f"  üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: {self.output_dir}")
    
    def find_object_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ XML —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        object_files = []
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        object_dirs = ['Catalogs', 'Documents', 'Reports', 'DataProcessors', 'ExternalDataProcessors']
        
        for obj_dir in object_dirs:
            obj_path = self.conf_dir / obj_dir
            if obj_path.exists():
                for xml_file in obj_path.rglob("*.xml"):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º
                    if not xml_file.name.startswith("Form"):
                        object_files.append(xml_file)
        
        return object_files
    
    def parse_object_xml(self, xml_path: Path) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª –æ–±—ä–µ–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª—è—Ö."""
        try:
            tree = ET.parse(xml_path)
            root = tree.getroot()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
            namespaces = {
                'mdclass': 'http://v8.1c.ru/8.3/MDClasses',
                'core': 'http://v8.1c.ru/8.1/data/core'
            }
            
            object_data = {
                "name": xml_path.stem,
                "type": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "attributes": [],
                "tabular_sections": [],
                "forms": [],
                "modules": []
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏
            path_parts = xml_path.parts
            for i, part in enumerate(path_parts):
                if part in ['Catalogs', 'Documents', 'Reports', 'DataProcessors', 'ExternalDataProcessors']:
                    object_data["type"] = part
                    break
            
            # –ò—â–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            for attr in root.findall('.//mdclass:Attribute', namespaces):
                name_elem = attr.find('.//mdclass:Name', namespaces)
                type_elem = attr.find('.//core:Type', namespaces)
                
                if name_elem is not None:
                    attr_name = name_elem.text
                    attr_type = type_elem.text if type_elem is not None else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                    
                    object_data["attributes"].append({
                        "name": attr_name,
                        "type": attr_type
                    })
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏
            for tab_section in root.findall('.//mdclass:TabularSection', namespaces):
                name_elem = tab_section.find('.//mdclass:Name', namespaces)
                
                if name_elem is not None:
                    section_name = name_elem.text
                    section_data = {
                        "name": section_name,
                        "columns": []
                    }
                    
                    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
                    for col in tab_section.findall('.//mdclass:Attribute', namespaces):
                        col_name_elem = col.find('.//mdclass:Name', namespaces)
                        col_type_elem = col.find('.//core:Type', namespaces)
                        
                        if col_name_elem is not None:
                            col_name = col_name_elem.text
                            col_type = col_type_elem.text if col_type_elem is not None else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                            
                            section_data["columns"].append({
                                "name": col_name,
                                "type": col_type
                            })
                    
                    object_data["tabular_sections"].append(section_data)
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—ã
            for form in root.findall('.//mdclass:Form', namespaces):
                name_elem = form.find('.//mdclass:Name', namespaces)
                
                if name_elem is not None:
                    form_name = name_elem.text
                    object_data["forms"].append(form_name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
            default_modules = [
                "ObjectModule",
                "ManagerModule", 
                "FormModule"
            ]
            
            object_data["modules"] = default_modules
            
            return object_data
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—ä–µ–∫—Ç–∞ {xml_path}: {e}")
            return {
                "name": xml_path.stem,
                "type": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
                "attributes": [],
                "tabular_sections": [],
                "forms": [],
                "modules": []
            }
    
    def generate_module_contract(self, xml_path: Path) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥—É–ª—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞."""
        try:
            print(f"  üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±—ä–µ–∫—Ç: {xml_path.name}")
            
            # –ü–∞—Ä—Å–∏–º XML –æ–±—ä–µ–∫—Ç–∞
            object_data = self.parse_object_xml(xml_path)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥—É–ª—è
            contract = {
                "object_name": object_data["name"],
                "object_type": object_data["type"],
                "path": str(xml_path),
                "attributes": object_data["attributes"],
                "tabular_sections": object_data["tabular_sections"],
                "forms": object_data["forms"],
                "modules": object_data["modules"],
                "description": f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥—É–ª—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_data['name']} —Ç–∏–ø–∞ {object_data['type']}"
            }
            
            return contract
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–¥—É–ª—è –¥–ª—è {xml_path}: {e}")
            return None
    
    def save_module_contract(self, contract: Dict[str, Any], xml_path: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥—É–ª—è –≤ JSON —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            object_name = contract["object_name"]
            object_type = contract["object_type"]
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_name = object_name.replace('.', '_')
            safe_type = object_type.replace('.', '_')
            
            contract_filename = f"{safe_name}_{safe_type}_ModuleContract.json"
            contract_path = self.output_dir / contract_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            with open(contract_path, 'w', encoding='utf-8') as f:
                json.dump(contract, f, ensure_ascii=False, indent=4)
            
            print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_filename}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –º–æ–¥—É–ª—è –¥–ª—è {xml_path}: {e}")
    
    def generate(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π."""
        try:
            print(f"  üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.conf_dir}")
            print(f"  üìÇ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
            
            # –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
            self.clean_output_directory()
            self.output_dir.mkdir(parents=True, exist_ok=True)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–æ–≤
            object_files = self.find_object_files()
            print(f"  üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤: {len(object_files)}")
            
            if not object_files:
                print("  ‚ö†Ô∏è  –§–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
            success_count = 0
            for xml_path in object_files:
                contract = self.generate_module_contract(xml_path)
                if contract:
                    self.save_module_contract(contract, xml_path)
                    success_count += 1
            
            print(f"\n  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {success_count}/{len(object_files)}")
            
            return True
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
            return False 